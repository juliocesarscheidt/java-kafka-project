version: '3.4'

services:
  zookeeper:
    container_name: zookeeper
    hostname: zookeeper
    image: confluentinc/cp-zookeeper:6.0.0
    restart: on-failure
    networks:
      - subnet_0
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data

  kafka:
    container_name: kafka
    hostname: kafka
    image: confluentinc/cp-kafka:6.0.0
    restart: on-failure
    networks:
      - subnet_0
    ports:
      - 9092:9092
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka-boot:
    container_name: kafka-boot
    hostname: kafka-boot
    image: confluentinc/cp-kafka:6.0.0
    restart: "no"
    networks:
      - subnet_0
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      TOPIC: ${TOPIC:-topic_0}
    command: >
      sh -c "env && sleep 10 &&
      kafka-topics
      --zookeeper $$KAFKA_ZOOKEEPER_CONNECT
      --create --topic $$TOPIC --partitions 1
      --replication-factor 1 --if-not-exists &&
      kafka-topics --zookeeper $$KAFKA_ZOOKEEPER_CONNECT --list | egrep -v '^_'"

  kafka-producer:
    container_name: kafka-producer
    build:
      context: ./producer
    restart: "no"
    networks:
      - subnet_0
    environment:
      JAVA_OPTIONS: -Xmx400m
      BOOTSTRAP_SERVERS: kafka:9092
      TOPIC_NAME: topic_0

  kafka-consumer:
    container_name: kafka-consumer
    build:
      context: ./consumer
    restart: on-failure
    networks:
      - subnet_0
    environment:
      JAVA_OPTIONS: -Xmx400m
      BOOTSTRAP_SERVERS: kafka:9092
      TOPIC_NAME: topic_0

networks:
  subnet_0:
    driver: bridge

volumes:
  zookeeper-data: {}
